pragma solidity ^0.5.0;

contract Crud {
    struct User {
        uint256 id;
        string name;
    }
    User[] public users;
    uint256 public nextId = 0;

    function Create(string memory name) public {
        users.push(User(nextId, name));
        nextId++;
    }

    function Read(uint256 id) public view returns (uint256, string memory) {
        for (uint256 i = 0; i < users.length; i++) {
            if (users[i].id == id) {
                return (users[i].id, users[i].name);
            }
        }
    }

    function Update(uint256 id, string memory name) public {
        for (uint256 i = 0; i < users.length; i++) {
            if (users[i].id == id) {
                users[i].name = name;
            }
        }
    }

    function Delete(uint256 id) public {
        delete users[id];
    }

    function find(uint256 id) internal view returns (uint256) {
        for (uint256 i = 0; i < users.length; i++) {
            if (users[i].id == id) {
                return i;
            }
        }
        // if user does not exist then revert back
        revert("User does not exist");
    }

    function fallback() external payable { 

    }
    
    
    
}